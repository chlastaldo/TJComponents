<style>
.button{ -moz-user-select: none; -webkit-user-select: none; -ms-user-select: none; user-select: none; cursor: defualt; display: inline-block; position: relative; vertical-align: top; text-align: center; border-radius: 3px;  height:34px; line-height: 32px; min-width: 100px; font-size: 12px; padding: 0 10px; box-sizing: border-box; cursor: pointer; transition: border 150ms, color 150ms, background 150ms; }
.button{ font-weight: 600;background-color: #242838; border: 1px solid #242838; color: #c1c4ce;  }
.button:hover{ background: #242838; border-color: #242838; }
.button.small{ height: 22px; line-height: 20px; border-weight: 1px; }
.button.empty{ background-color: #525666; border-color:  #525666; color: #c1c4ce; }
.button.empty:hover{ border-color: #525666; color: #c1c4ce; }
.button.red{ background-color: #F44336; border-color: #F44336; color: #fff; }
.button.red:hover{ background-color: #F44336; border-color: #F44336; color: #fff; }
.button.green{ background-color: #4CAF50; border-color: #4CAF50; color: #fff; }
.button.green:hover{ background-color: #4CAF50; border-color: #4CAF50; color: #fff; }
.button.blue{ background-color: #1E88E5; border-color: #1E88E5; color: #fff; }
.button.blue:hover{ background-color: #1E88E5; border-color: #1E88E5; color: #fff; }
.button.orange{ background-color: #FB8C00; border-color: #FB8C00; color: #fff; }
.button.orange:hover{ background-color: #FB8C00; border-color: #FB8C00; color: #fff; }
.button.purple{ background-color: #8E24AA; border-color: #8E24AA; color: #fff; }
.button.purple:hover{ background-color: #8E24AA; border-color: #8E24AA; color: #fff; }
.button.silver{ background-color: #9E9E9E; border-color: #9E9E9E; color: #fff; }
.button.silver:hover{ background-color: #9E9E9E; border-color: #9E9E9E; color: #fff; }
.button.clear{ background-color: transparent; border-color: transparent; color: #a8adbf; }
.button.clear:hover{ background-color: transparent; border-color: transparent; color: #545454; text-decoration: underline;}

.button.button_loader{ color: transparent; }
.button.button_loader:hover{ color: transparent; }
.button.button_loader:after
{
    content: "\f110";
    font-family: FontAwesome;
    color: #fff;
    position: absolute;
    left: 0;
    right: 0;
    top: 8px;
    height: 15px;
    width: 15px;
    margin: 0 auto;
    text-align: center;
    line-height: 15px;
    font-size: 14px;
    -webkit-animation: a-loader 2s infinite linear;
    animation: a-loader 2s infinite linear;
}
</style>

if( typeof script !== 'undefined' && script === 'true' )
{
	<script>
		if( typeof Form === 'undefined' )
		{
			window.Form = class Form
			{
				constructor( form )
				{
					this.form = form;
				}

				removeDisable( selector = '' )
				{
					Array.from( this.form.elements ).forEach( ( input ) =>
					{
						if( selector === '' || ( selector != '' && input.classList.contains( selector ) ) )
						{
							input.disabled = false;
							input.parentNode.classList.remove('disabled');
						}
					} );
				}

				setValue( input, value )
				{
					this.form.elements[input].value = value;
					this.form.elements[input].parentNode.classList[ ( value === '' ? 'remove' : 'add' ) ]( 'fill' );
				}

				addError( validity )
				{
					validity.forEach( ( valid ) => { this.form.elements[valid].parentNode.classList.add( 'error' ) } )
				}

				removeError()
				{
					Array.from( this.form.elements ).forEach( ( input ) => { input.parentNode.classList.remove( 'error' ) } )
				}

				/*
				customError	Set to true, if a custom validity message is set.
				patternMismatch	Set to true, if an element's value does not match its pattern attribute.
				rangeOverflow	Set to true, if an element's value is greater than its max attribute.
				rangeUnderflow	Set to true, if an element's value is less than its min attribute.
				stepMismatch	Set to true, if an element's value is invalid per its step attribute.
				tooLong	Set to true, if an element's value exceeds its maxLength attribute.
				typeMismatch	Set to true, if an element's value is invalid per its type attribute.
				valueMissing	Set to true, if an element (with a required attribute) has no value.
				valid	Set to true, if an element's value is valid.
				*/
				checkValidity()
				{
					var notValidElements = [];

					Array.from( this.form.elements ).forEach( ( input ) =>
					{
						if( input.getAttribute('required') && !input.validity[ input.getAttribute('required') ] )
						{
							notValidElements.push( input.name );
						}
					} )

					return notValidElements;
				}

				data()
				{
					let data = {};
					for( var pair of ( new FormData(this.form) ).entries() )
					{
						data[ pair[0] ] = pair[1];
					}

					return data;
				}

				post( form, callback = null )
				{
					this.form = form;
					this.removeError();

					let methods = { 'PUT' 	: 'application/json', 'POST'	: 'application/json', 'PATCH' : 'application/json', 'DELETE': 'application/json' };
					let method = form.getAttribute('method');

					if( Object.keys( methods ).indexOf( method ) === -1 ){ console.log( 'Unsupported method '+ method ); return null; }

					let checkInputs =  this.checkValidity();
					if( checkInputs.length > 0 ){ this.addError( checkInputs ); return; }

					let data = {};
					for( var pair of ( new FormData(form) ).entries() ) { data[ pair[0] ] = pair[1]; }

					return fetch( form.getAttribute('action'), { method : method, body : JSON.stringify( data ), headers : new Headers({'Content-Type': methods[method], 'Cache-Control' : 'no-cache' }) } )
						.then( ( response ) =>
						{
							if( ['application/json'].includes( response.headers.get('Content-Type') ) )
							{
								return response.json();
							}
							else
							{
								return response.text();
							}
						})
						.then( ( response ) =>
						{
							if( callback )
							{
								callback( response )
							}else{ console.log( response );  }
						})
						.catch(e =>
						{
							console.log( e, 'Exception' );
						});
				}
			}
	}

	</script>
}

<div id={( typeof id !== 'undefined' ? id : '' )} title={( typeof title !== 'undefined' ? title : null )} style={( typeof style !== 'undefined' ? style : '' )} class={( typeof clazz !== 'undefined' ? 'button '+clazz : 'button' )} onclick={( typeof onclick !== 'undefined' ? onclick : '' )}>{label}</div>
