<Select id={id} label={( typeof label !== 'undefined' ? label : undefined )} required={( typeof required !== 'undefined' ? required : undefined )} pattern={( typeof pattern !== 'undefined' ? pattern : undefined )} option={option} value={value} join={( typeof join !== 'undefined' ? join : ',' )} width={( typeof width !== 'undefined' ? width : undefined )} suggest={( typeof suggest !== 'undefined' ? suggest : undefined )} request={( typeof request !== 'undefined' ? request : undefined )} init={false}/>
<script>
	if( typeof Multiselect === 'undefined' )
	{
		window.Multiselect = class Multiselect extends Select
		{
			constructor( input, value, option )
			{
				super( input, value, option, { value : false } );

				this._values = [];
				this._join = ( ( input.getAttribute('data-join') ? input.getAttribute('data-join') : ',' ) );
				let value_array = ( typeof value === 'string' ? value.split( this._join ) : value );

				this._values =  Object.keys( option ).reduce( ( arr, item ) => { if( value_array.includes( item ) ){ arr.push( { value : item, label : option[item] } ) } if( typeof option[ item ] === 'object' ){  Object.keys( option[item] ).reduce( ( arr, sub_item ) => {  if( value_array.includes( sub_item ) ){ arr.push( { value : sub_item, label : option[item][sub_item] }  ) } return arr;  }, arr );  } return arr; }, [] );
			}

			select( element )
			{
				var id = element.getAttribute('data-value');
				this._values = this._values.filter( ( value ) => { return value.value != id; } );

				if( element.classList.contains('active') )
				{
					element.classList.remove('active');
				}
				else
				{
					element.classList.add('active');
					this._values.push( { value : id, label : element.innerHTML } );
				}

				this._setValue();
			}

			_setValue( change = true )
			{
				let old_value = this._input.value;

				this._element.querySelector('.input').innerHTML = this._values.map( ( value ) => { return value.label } ).filter( item => { return item != '' } ).join( this._join+' ' );
				this._input.value = this._values.map( ( value ) =>
				{
					if( this._element.querySelector('.select-option[data-value="'+value.value+'"]') )
					{
						this._element.querySelector('.select-option[data-value="'+value.value+'"]').classList.add('active');
					}
					return value.value;
				} ).join( this._join );

				if( this._input.value !== '' )
				{
					this._element.classList.add('fill');
				}
				else if( this._input.value === '' )
				{
					this._element.classList.remove('fill');
					if( this._element.querySelectorAll('.select-option.active').length > 0 )
					{
						this._element.querySelectorAll('.select-option.active').forEach( active => active.classList.remove('active') );
					}
				}

				if( this._input.onchange && old_value !== this._input.value && change )
				{
					this._input.onchange();
				}

				if( "createEvent" in document  && old_value !== this._input.value && change )
				{
					var evt = document.createEvent("HTMLEvents");
						evt.initEvent("change", false, true);
					this._input.dispatchEvent(evt);
				}
			}

			setValue( value )
			{
				this._values = [];
				if( value != '' )
				{
					value.split( this._join ).forEach( item => { this._values.push( { item, label : this._option[ item ] } ) } );
				}

				this._setValue();
			}
		}
	}
</script>

<script instance id={id} value={value} option={option}>
	new Multiselect( document.getElementById( id ), value, option );
</script>
