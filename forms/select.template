<style require="form.style">
.input-select
{
    @form_border;
	@form_border_radius;
	@border-box;
	display: inline-block;
	vertical-align: top;
    height: 42px;
    line-height: 40px;
    position: relative;
    cursor: text;
    background-color: $form_background_color;
    color: $form_color;

	&.error
	{
		background-color: $form_error_background;
		border-color: $form_error_border;
	}

	.input
	{
		display: block;
		height: 20px;
		line-height: 20px;
		margin-top: 10px;
		margin-bottom: 10px;
		padding: 0 20px 0 5px;
		position: relative;
		width: 100%;
		transition: margin-top 50ms ease-in 0s;
		border: 0;
		outline: none;
		@border-box;
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;

		&:empty:before {
  content: "\200B";
  display: inline;
}
		&:after
		{
			content: "\f0d7";
			font-family: "Font Awesome 5 Free";
			font-weight: 900;
			font-size: 20px;
			top: 0;
			right: 0;
			bottom: 0;
			width: 20px;
			height: 20px;
			position: absolute;
			text-align: center;
			background-color: $form_background_color;
			opacity: 0;
			transition: opacity 200ms ease-in;
		}
	}

	label
	{
		cursor: pointer;
		font-size: 14px;
		font-weight: 400;
		height: 20px;
		left: 5px;
		line-height: 20px;
		position: absolute;
		top: 10px;
		color: $form_label_color;
		transition: top 50ms ease-in 0s,font-size 50ms ease-in 0s,color 50ms ease-in 0s;
		-webkit-transition: top 50ms ease-in 0s,font-size 50ms ease-in 0s,color 50ms ease-in 0s;
	}

	.select-wrap
	{
		position: absolute;
		left: 0;
		top: 40px;
		background-color: transparent;
		width: 100%;
		border: 1px solid transparent;
		height: 0;
		overflow: hidden;
		overflow-y: hidden;
		overflow-y: scroll;
		max-height: 150px;

		input
		{
			display: inline-block;
			height: 20px;
			margin-top: 10px;
			margin-bottom: 10px;
			padding: 0 5px;
			position: relative;
			font-family: inherit;
			color: inherit;
			font-size:13px;
			width: 100%;
			transition: margin-top 50ms ease-in 0s;
			border: 0;
			outline: none;
			background-color: transparent;
			color: $form_color;
			@border-box;

			&:invalid
			{
			    border: 0;
			    box-shadow: none;
			}

			&::-webkit-input-placeholder { color: $form_option_color; }
			&::-moz-placeholder { color: $form_option_color; }
			&:-ms-input-placeholder { color: $form_option_color; }
			&:-moz-placeholder { color: $form_option_color; }
		}
		.select-option
		{
			padding: 5px;
			line-height: 1;
			font-size: 13px;
			cursor: pointer;
			color: $form_option_color;

			&:hover,
			&.active
			{
				background-color: $form_option_fill_background;
				color: $form_option_fill_color;
			}
		}
	}

	&:hover
	{
		.input
		{
			&:after
			{
				opacity: 0.3;
			}
		}
	}

	&.focus{ @form_focus; }
	&.fill{ @form_fill; }

	&.focus,
	&.fill
	{
		.input
		{
			margin-bottom: 1px;
		    margin-top: 19px;
		}
		label
		{
			font-size: 11px;
			top: 0;
		}
		.input
		{
			color : $form_color_fill;
			&:after
			{
				opacity: 0.7;
			}
		}

		&.not-label
		{
			.input
			{
				margin-bottom: 10px;
			    margin-top: 10px;
			}
		}
	}
	&.focus
	{
		.select-wrap
		{
			height: auto;
			background-color: #fff;
			z-index: 1;
			margin-left: -1px;
			@form_focus;
		}
	}
}
</style>
<script>
	if( typeof Select === 'undefined' )
	{
		window.Select = class Select
		{
			constructor( input, value, option, options = {} )
			{
				input._class = this;

				this._input = input;
				this._element = this._input.parentNode;

				this._element.addEventListener( 'click', this.focus.bind(this) );
				this._element.addEventListener( 'mouseover', this.stop.bind(this) );
				this._element.addEventListener( 'mouseout', this.hidden.bind(this) );

				if( options.hasOwnProperty('contenteditable') && options.contenteditable )
				{
					this._element.querySelector('.input').addEventListener( 'keypress', event => { if( event.keyCode === 13 ){  DOM_stopPropagation( event ) } } );
					this._element.querySelector('.input').addEventListener( 'input', event => { event.target.previousSibling.value = event.target.textContent.replace(/\n|\t/g,' '); } );
				}
				this._element.querySelectorAll('.select-option').forEach( ( item ) => { item.addEventListener( 'click', this.select.bind(this, item) ); } );

				let input_text = null;
				if( ( input_text = this._element.querySelector('.select-wrap input[type="text"]') ) )
				{
					input_text.addEventListener( 'keyup', this.keyup.bind( this, input_text ) );
				}
				this._option = option;
				this._values = ( value ? [{ value, label : option[ value ] }] : [] );
				this._setValue();

				this._suggest_timeout = null;
			}

			stop()
			{
				Timers.unsetTimeout( this._input.id );
			}

			hidden( id, element )
			{
				Timers.setTimeout( this._input.id, () =>
		        {
					if( this._input.value !== '' ){ this._element.classList.add('fill'); }else{ this._element.classList.remove('fill'); }
		            this._element.classList.remove('focus');
		        }, 500);
			}

			focus( event )
			{
				if( event.target.classList.contains('input-select') || event.target.classList.contains('input') )
				{
					this._element.querySelector('.select-wrap').style.maxHeight = Math.max( 150, ( document.body.getBoundingClientRect().height - this._element.querySelector('.select-wrap').getBoundingClientRect().y - 100 ) )+'px';
					this._element.classList.add('focus');

					if( this._element.querySelector('.select-wrap input[type="text"]') && !this._element.querySelector('.input').getAttribute('contenteditable') ){ this._element.querySelector('.select-wrap input[type="text"]').focus(); }
				}
			}

			setValue( value )
			{
				this._values = [];
				if( this._option[ value ] ){ this._values.push({ value, label : this._option[ value ] }) }
				this._setValue();
			}

			select( element )
			{
				this._values = [];
				if( element.classList.contains('active') )
				{
					element.classList.remove('active');
				}
				else
				{
					this._element.querySelectorAll('.select-option').forEach( item => item.classList.remove('active') );

					element.classList.add('active');
					this._values.push({ value : element.getAttribute('data-value'), label : element.innerHTML });
				}

				this._setValue();
			}

			keyup( element )
			{
				if( element.getAttribute('data-request') )
				{
					var url = decodeURIComponent( element.getAttribute( 'data-request' ) );

					window.clearTimeout( this._suggest_timeout );

					this._suggest_timeout = setTimeout( () =>
					{
						DOM_request( 'POST', url, { query : element.value, id : 'cn=John Doe,cn=grupa,dc=xclbr-ub,dc=com' }, ( rows ) =>
						{
							rows = JSON.parse(rows);
							var wrapper = element.parentNode;
								wrapper.querySelectorAll('.select-option:not(.active)').remove();

							let div = null;

							for( var key in rows )
							{
								div = wrapper.querySelector('.select-option[data-value="'+key+'"]');
								if( !div )
								{
									div = document.createElement('div');
									div.className = 'select-option';
									div.setAttribute('data-value', key );
									div.innerHTML = rows[key];
									div.addEventListener( 'click', this.select.bind(this, div) );
								}
								wrapper.insertBefore( div, element.nextSibling );
							}

						} );
					}, 300 );
				}
				else
				{
					var options = element.parentNode.querySelectorAll('.select-option');
			        if( options.length > 0 )
			        {
			            for( var a = 0; a < options.length; ++a )
			            {
			                if( !this._containsWords( options[a].innerHTML, element.value ) ){ options[a].style.display = 'none'; } else { options[a].style.display = 'block'; }
			            }
			        }
				}
			}

			_setValue()
			{
				this._element.querySelector('.input').innerHTML = ( this._values.length > 0 ? this._values[0].label : '' );
				this._input.value = ( this._values.length > 0 ? this._values[0].value : '' );

				if( this._input.value !== '' )
				{
					this._element.classList.add('fill');
				}
				else if( this._input.value === '' )
				{
					this._element.classList.remove('fill');
				}
			}

			_containsWords( haystack, words )
		    {
		        words = words.trim().toLowerCase();
		        haystack = haystack.trim().toLowerCase();

		        if( words.length )
		        {
		            if( typeof words == 'string' ){ words = words.split(/\s+/g); }

		            for( var i = 0; i < words.length; ++i )
		            {
		                let position = -1, found = false;

		                while( ( position = haystack.indexOf( words[i], position + 1 ) ) !== -1 )
		                {
	                        if( position != 0 && ' \t\n'.indexOf(haystack[position-1]) === -1 ) { continue; } else if( i < words.length - 1 && haystack.length > words[i].length + position && ' \t\n'.indexOf(haystack[position+words[i].length]) === -1 ) { continue; } else { found = true; break; }
		                }

		                if( !found ){ return false; }
		            }
		        }
		        return true;
		    }
			__setCaretPosition( position, element )
			{
				if( position === 0 ){ return; }
				var range = document.createRange();
				var sel = window.getSelection();
				range.setStart(element.childNodes[0], position);
				range.collapse(true);

				sel.removeAllRanges();
				sel.addRange(range);
			}

			__getCaretPosition(editableDiv)
			{
  				let caretPos = 0, sel, range;
				if (window.getSelection)
				{
					sel = window.getSelection();
					if (sel.rangeCount) { range = sel.getRangeAt(0); if (range.commonAncestorContainer.parentNode == editableDiv) { caretPos = range.endOffset; } }
				}
				else if (document.selection && document.selection.createRange)
				{
					range = document.selection.createRange();
					if (range.parentElement() == editableDiv)
					{
						var tempEl = document.createElement("span");
						editableDiv.insertBefore(tempEl, editableDiv.firstChild);
						var tempRange = range.duplicate();
							tempRange.moveToElementText(tempEl);
							tempRange.setEndPoint("EndToEnd", range);
						caretPos = tempRange.text.length;
					}
				}
				return caretPos;
			}
		}
	}
</script>
<div style={'width:'+(typeof width !== 'undefined' ? width : '100%')+';'} class={'input-select'+(typeof value !== 'undefined' && value !== '' ? ' fill' : '')+(typeof disabled !== 'undefined' && disabled === 'true' ? ' disabled' : '')+(typeof label === 'undefined' ? ' not-label' : '')}>
	<input type="hidden" value={(typeof value !== 'undefined' ? value : '')} name={(typeof id !== 'undefined' ? id : '')} id={(typeof id !== 'undefined' ? id : '')} data-join={(typeof join !== 'undefined' ? join : null )} />
	<div class="input" contenteditable={( typeof contenteditable !== 'undefined' ? contenteditable : null )} autocomplete="off" autocapitalize="off" autocorrect="off" spellcheck="false"></div>
	<div class="select-wrap">
		if( typeof suggest !== 'undefined' && suggest )
		{
			<input placeholder="Search" autocomplete="off" class="input-element-text" onkeypress="return event.keyCode!=13" type="text" data-request={ ( typeof request !== 'undefined' ? encodeURIComponent( request ) : null ) }/>
		}


		for( key, item of option )
		{
			<div class={'select-option'+( typeof value !== 'undefined' && value === key ? ' active' : '' )} data-value={key}>{item}</div>
		}
	</div>
	if( typeof label !== 'undefined' )
	{
		<label for={id} class="label">{label}</label>
	}
</div>

<script instance id={id} value={value} option={option} contenteditable={( typeof contenteditable !== 'undefined' ? contenteditable : false )} init={( typeof init !== 'undefined' ? init : 'true' )}>
	if( init === 'true' )
	{
		new Select( document.getElementById( id ), value, option, {contenteditable} );
	}
</script>
